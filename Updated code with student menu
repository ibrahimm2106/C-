#include <iostream>
#include <fstream>
#include <iomanip>
#include <vector>
#include <string>
#include <sstream>
#include <ctime>
#include <chrono>
#include <algorithm>
#include <limits>

using namespace std;

class Book {
private:
    string title;
    string author;
    int year;
    string publisher;
    int bookID;
    int totalCopies;
    int availableCopies;
    string subject;

public:
    Book() : year(0), bookID(0), totalCopies(0), availableCopies(0) {}

    void setTitle(const string& t) { title = t; }
    void setAuthor(const string& a) { author = a; }
    void setYear(int y) { year = y; }
    void setPublisher(const string& p) { publisher = p; }
    void setBookID(int id) { bookID = id; }
    void setTotalCopies(int total) { totalCopies = total; }
    void setAvailableCopies(int available) { availableCopies = available; }
    void setSubject(const string& s) { subject = s; }

    string getTitle() const { return title; }
    string getAuthor() const { return author; }
    int getYear() const { return year; }
    string getPublisher() const { return publisher; }
    int getBookID() const { return bookID; }
    int getTotalCopies() const { return totalCopies; }
    int getAvailableCopies() const { return availableCopies; }
    string getSubject() const { return subject; }

    void display() const {
        cout << left << setw(25) << "Title: " << title << endl
            << left << setw(25) << "Author: " << author << endl
            << left << setw(25) << "Year: " << year << endl
            << left << setw(25) << "Publisher: " << publisher << endl
            << left << setw(25) << "BookID: " << bookID << endl
            << left << setw(25) << "Total Copies: " << totalCopies << endl
            << left << setw(25) << "Available Copies: " << availableCopies << endl
            << left << setw(25) << "Subject: " << subject << endl;
    }
};

class Library {
private:
    vector<Book> books;
    string booksFile = "C:\\Users\\ibrahimm23\\Documents\\books.csv";
    string borrowingFile = "C:\\Users\\ibrahimm23\\Documents\\borrowing_records.csv";
    string returnFile = "C:\\Users\\ibrahimm23\\Documents\\return_records.csv";
    string finesFile = "C:\\Users\\ibrahimm23\\Documents\\fines.csv";

public:
    Library() {
        loadBooksFromFile();
    }

    void loadBooksFromFile() {
        ifstream infile(booksFile);
        string line;
        while (getline(infile, line)) {
            stringstream ss(line);
            Book book;
            getline(ss, book.title, ',');
            getline(ss, book.author, ',');
            ss >> book.year;
            ss.ignore();
            getline(ss, book.publisher, ',');
            ss >> book.bookID;
            ss.ignore();
            ss >> book.totalCopies;
            ss.ignore();
            ss >> book.availableCopies;
            ss.ignore();
            getline(ss, book.subject);
            books.push_back(book);
        }
    }

    void saveBooksToFile() {
        ofstream outfile(booksFile);
        for (const auto& book : books) {
            outfile << book.getTitle() << ","
                << book.getAuthor() << ","
                << book.getYear() << ","
                << book.getPublisher() << ","
                << book.getBookID() << ","
                << book.getTotalCopies() << ","
                << book.getAvailableCopies() << ","
                << book.getSubject() << "\n";
        }
    }

    void registerBook() {
        Book newBook;
        cout << "Enter the book's title: ";
        getline(cin, newBook.title);
        cout << "Enter the author's name: ";
        getline(cin, newBook.author);
        cout << "Enter the publication year: ";
        cin >> newBook.year;
        cin.ignore();
        cout << "Enter the publisher: ";
        getline(cin, newBook.publisher);
        cout << "Enter the book's ID: ";
        cin >> newBook.bookID;
        cout << "Enter the total copies: ";
        cin >> newBook.totalCopies;
        cout << "Enter the available copies: ";
        cin >> newBook.availableCopies;
        cin.ignore();
        cout << "Enter the subject: ";
        getline(cin, newBook.subject);
        books.push_back(newBook);
        saveBooksToFile();
    }

    void borrowBook(int bookID) {
        auto it = find_if(books.begin(), books.end(), [bookID](const Book& book) { return book.getBookID() == bookID; });
        if (it != books.end() && it->getAvailableCopies() > 0) {
            it->setAvailableCopies(it->getAvailableCopies() - 1);
            ofstream outfile(borrowingFile, ios::app);
            if (outfile) {
                outfile << bookID << "," << getCurrentDate() << "\n";
                cout << "Book borrowed successfully." << endl;
            }
            else {
                cerr << "Error: Unable to open borrowing records file." << endl;
            }
            saveBooksToFile();
        }
        else if (it != books.end()) {
            cout << "No available copies left to borrow." << endl;
        }
        else {
            cout << "Book not found." << endl;
        }
    }

    void returnBook(int bookID) {
        auto it = find_if(books.begin(), books.end(), [bookID](const Book& book) { return book.getBookID() == bookID; });
        if (it != books.end()) {
            it->setAvailableCopies(it->getAvailableCopies() + 1);
            ofstream outfile(returnFile, ios::app);
            if (outfile) {
                outfile << bookID << "," << getCurrentDate() << "\n";
                cout << "Book returned successfully." << endl;
                // Calculate and record fines if applicable
                calculateFines(bookID, getCurrentDate());  // Assume current date as returned date for demo
            }
            else {
                cerr << "Error: Unable to open return records file." << endl;
            }
            saveBooksToFile();
        }
        else {
            cout << "Book not found." << endl;
        }
    }

    void calculateFines(int bookID, const string& returnDate) {
        auto it = find_if(books.begin(), books.end(), [bookID](const Book& book) { return book.getBookID() == bookID; });
        if (it != books.end()) {
            string currentDate = getCurrentDate();  // Should be the date when the book is returned
            tm t1 = {}, t2 = {};
            stringstream ss1(currentDate), ss2(returnDate);
            ss1 >> get_time(&t1, "%Y-%m-%d");
            ss2 >> get_time(&t2, "%Y-%m-%d");
            time_t time1 = mktime(&t1);
            time_t time2 = mktime(&t2);
            double seconds_diff = difftime(time1, time2);
            int days_diff = static_cast<int>(seconds_diff / (60 * 60 * 24));
            if (days_diff > 14) {
                double fine = (days_diff - 14) * 1.0; // $1 per day late fee
                ofstream outfile(finesFile, ios::app);
                if (outfile) {
                    outfile << bookID << "," << returnDate << "," << fine << "\n";
                    cout << "Fine calculated: $" << fine << endl;
                }
                else {
                    cerr << "Error: Unable to open fines file." << endl;
                }
            }
            else {
                cout << "No fines applicable." << endl;
            }
        }
        else {
            cout << "Book not found." << endl;
        }
    }

    string getCurrentDate() const {
        auto now = chrono::system_clock::now();
        time_t now_time = chrono::system_clock::to_time_t(now);
        struct tm timeinfo;
        localtime_s(&timeinfo, &now_time);
        char buffer[80];
        strftime(buffer, sizeof(buffer), "%Y-%m-%d", &timeinfo);
        return string(buffer);
    }
};

int main() {
    Library library("C:\\Users\\ibrahimm23\\Documents\\books.csv", "C:\\Users\\ibrahimm23\\Documents\\borrowing_records.csv", "C:\\Users\\ibrahimm23\\Documents\\return_records.csv", "C:\\Users\\ibrahimm23\\Documents\\fines.csv");

    int choice;
    do {
        cout << "Menu:\n"
            << "1. Register new book\n"
            << "2. Search for a book\n"
            << "3. Borrow a book\n"
            << "4. Return a book\n"
            << "5. Calculate fines\n"
            << "6. Exit\n"
            << "Enter your choice: ";
        cin >> choice;
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Clear buffer

        switch (choice) {
        case 1:
            library.registerBook();
            break;
        case 2:
        {
            string title;
            cout << "Enter book title to search: ";
            getline(cin, title);
            library.searchByTitle(title);
        }
        break;
        case 3:
        {
            int bookID;
            cout << "Enter book ID to borrow: ";
            cin >> bookID;
            library.borrowBook(bookID);
        }
        break;
        case 4:
        {
            int bookID;
            cout << "Enter book ID to return: ";
            cin >> bookID;
            library.returnBook(bookID);
        }
        break;
        case 5:
        {
            int bookID;
            string returnDate;
            cout << "Enter book ID: ";
            cin >> bookID;
            cout << "Enter return date (YYYY-MM-DD): ";
            cin >> returnDate;
            library.calculateFines(bookID, returnDate);
        }
        break;
        case 6:
            cout << "Exiting program." << endl;
            return 0;
        default:
            cout << "Invalid choice. Please enter a number between 1 and 6." << endl;
        }
    } while (true);

    return 0;
}
